https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1


class Solution{
    public:
    bool issafe(vector<vector<int>>visited ,vector<vector<int>> &m,int n , int x ,int y){ //check for it is right to move in next position or not
        if((x>=0 && x<n) && (y>=0 && y<n) && visited[x][y]==0 && m[x][y] ==1)
        {
            return true;
        }
        else{
            return false;
        }
    }
    void solve(vector<vector<int>>visited ,vector<vector<int>> &m,vector<string>&ans ,
    string path , int n , int x, int y){
        if(x==n-1 && y==n-1)
        {
            ans.push_back(path); // add path when reach destination
            return ;
        }
        else{
            visited[x][y] = 1; //mark for given position
            int nx = x+1;
            int ny = y;
            
            if(issafe(visited , m , n ,nx,ny))
            {
                path.push_back('D');
                solve(visited , m , ans , path , n , nx ,ny);
                path.pop_back();
            }
            
            nx = x-1;
            ny = y;
            if(issafe(visited , m , n ,nx,ny))
            {
                path.push_back('U');
                solve(visited , m , ans , path , n , nx ,ny);
                path.pop_back();
            }
            
            nx = x;
            ny = y-1;
            if(issafe(visited , m , n ,nx,ny))
            {
                path.push_back('L');
                solve(visited , m , ans , path , n , nx ,ny);
                path.pop_back();
            }
            
            nx = x;
            ny = y+1;
            if(issafe(visited , m , n ,nx,ny))
            {
                path.push_back('R');
                solve(visited , m , ans , path , n , nx ,ny);
                path.pop_back();
            }
            visited[x][y] = 0; //unmark for given postion to find any other path or backtrack;
        }
    }
                
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string>ans;
        string path="";
       if(m[0][0]==0)
       {
           return ans;
       }
       
       vector<vector<int>>visited=m;
       for(int i = 0 ; i <n;i++)
       {
           for(int j= 0 ; j< n;j++)
           {
               visited[i][j] = 0;
           }
       }
       
       int sx = 0;
       int sy = 0;
       solve(visited , m , ans , path , n , sx,sy);
       sort(ans.begin() ,ans.end());
       return ans;// Your code goes here
    }
};
