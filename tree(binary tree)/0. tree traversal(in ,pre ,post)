inorder--->https://practice.geeksforgeeks.org/problems/inorder-traversal/1#

class Solution {
  private:
  void in(Node* root , vector<int>&v){
      if(root==NULL){
          return ;
      }
      else{
          in(root->left , v);  //left
          v.push_back(root->data); //root or node
          in(root->right , v); //right
      }
  }
    
  public:
    // Function to return a list containing the inorder traversal of the tree.
    vector<int> inOrder(Node* root) {
        vector<int>v;
        in(root ,v);
        return v;// Your code here
    }
};


preorder--->https://practice.geeksforgeeks.org/problems/preorder-traversal/1


void pre(Node* root , vector<int>&v){
      if(root==NULL){
          return ;
      }
      else{
          v.push_back(root->data);
          pre(root->left , v);
          pre(root->right , v);
      }
  }
//Function to return a list containing the preorder traversal of the tree.
vector <int> preorder(Node* root)
{
    vector<int>v;
    pre(root ,v);
    return v;// Your code here
}


post--->https://practice.geeksforgeeks.org/problems/postorder-traversal/1


void post(Node* root , vector<int>&v){
      if(root==NULL){
          return ;
      }
      else{
          post(root->left , v);
          post(root->right , v);
          v.push_back(root->data);
      }
  }//Function to return a list containing the postorder traversal of the tree.
vector <int> postOrder(Node* root)
{
  vector<int>v;
        post(root ,v);
        return v;// Your code here
}
