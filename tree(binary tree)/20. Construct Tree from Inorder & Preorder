https://practice.geeksforgeeks.org/problems/construct-tree-1/1/#


class Solution{
    public:
    // int findininorder(int in[] ,int  el, int n){
    //     for(int i = 0 ;i<n;i++){
    //         if(in[i]==el){
    //             return i;
    //         }
    //     }
    //     return -1;
    // }
    
    void createmapping(int in[] ,map<int ,int>&nodetoindex, int n){
        for(int i = 0 ;i<n;i++){
            nodetoindex[in[i]] = i;
        } //ye mapping ki taki harr bar element serch na krna paddega iss lai kiya ye
        
    }
    Node* solve(int in[] , int pre[] ,int &preindex , int instart , int inend ,int n ,map<int ,int>&nodetoindex){
        if(preindex>=n || instart>inend){
            return NULL;
        }
        else{
            int element = pre[preindex++];
            Node* root = new Node(element);
            
            // int inpos = findininorder(in ,element , n);
            int inpos = nodetoindex[element];
            // root->left = solve(in ,pre ,preindex ,instart ,inpos-1 ,n);
            // root->right = solve(in ,pre ,preindex ,inpos+1 ,inend ,n);
            root->left = solve(in ,pre ,preindex ,instart ,inpos-1 ,n,nodetoindex);
            root->right = solve(in ,pre ,preindex ,inpos+1 ,inend ,n ,nodetoindex);
            return root;
        }
    }
    Node* buildTree(int in[],int pre[], int n)
    {
        int preindex = 0;
        // Node* root = solve(in ,pre ,preindex ,0 ,n-1 ,n);
        
        map<int ,int>nodetoindex;
        createmapping(in ,nodetoindex ,n);
        Node* root = solve(in ,pre ,preindex ,0 ,n-1 ,n ,nodetoindex);
        return root;// Code here
    }
};
