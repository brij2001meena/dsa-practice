https://practice.geeksforgeeks.org/problems/reverse-level-order-traversal/1/



//type-1 --->
// int height(Node* root){
//     if(root==NULL){
//         return 0;
//     }
//     else{
//         int l = height(root->left);
//         int r = height(root->right);
//         return max(l ,r)+1;
//     }
// }
// void print(Node*root , int level ,vector<int>&v){
//     if(root==NULL){
//         return;
//     }
//     if(level==0){
//         v.push_back(root->data);
//     }
//     else if(level>0){
//         print(root->left , level-1 ,v);
//         print(root->right ,level-1 ,v);
//     }
// }
// void reverse(Node* root , vector<int>&v){
//     int h = height(root);
//     for(int i = h ; i>=0 ;i--){
//         print(root ,i ,v);
//     }
// }


// type-2 -->
void reverse(Node*root , vector<int>&v){
    queue<Node*>q;
    stack<Node*>s;
    q.push(root);
    while(!q.empty()){
        Node* temp = q.front();
        s.push(temp);
        q.pop();
        
        if(temp->right){
            q.push(temp->right);
        }
        if(temp->left){
            q.push(temp->left);
        }
       
    }
    while(!s.empty()){
        Node* temp = s.top();
        v.push_back(temp->data);
        s.pop();
    }
}
vector<int> reverseLevelOrder(Node *root)
{
    vector<int>v;
    reverse(root ,v);
    return v;// code here
}
