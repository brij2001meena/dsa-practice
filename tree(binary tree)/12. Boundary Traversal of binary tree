https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1/#


void traverseleft(Node* root ,vector<int>&ans){
    if(root==NULL || (root->left==NULL && root->right==NULL)){
        return ;
    }
    else{
        ans.push_back(root->data);
        if(root->left){
            traverseleft(root->left ,ans);
        }
        else{
            traverseleft(root->right ,ans);
        }
    }
}
void traverseright(Node* root ,vector<int>&ans){
    if(root==NULL || (root->left==NULL && root->right==NULL)){
        return ;
    }
    else{
        if(root->right){
            traverseright(root->right ,ans);
        }
        else{
            traverseright(root->left ,ans);
        }
        ans.push_back(root->data); //ulta krna h na apne ko print so wapas aate time add krna element
    }
}
void traverseleaf(Node *root ,vector<int>&ans){
    if(root==NULL){
        return ;
    }
    if(root->left==NULL && root->right==NULL){
        ans.push_back(root->data);
    }
    traverseleaf(root->left ,ans);
    traverseleaf(root->right ,ans);
}
class Solution {
public:
    vector <int> boundary(Node *root)
    {
        vector<int>ans;
     if(root==NULL){
         return ans;
     }
     else{
         ans.push_back(root->data);
         traverseleft(root->left ,ans);
         traverseleaf(root->left ,ans);
         traverseleaf(root->right ,ans);
         traverseright(root->right ,ans);
         return ans;//Your code here
    }
    }
};
