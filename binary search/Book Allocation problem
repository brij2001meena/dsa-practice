https://practice.geeksforgeeks.org/problems/allocate-minimum-number-of-pages0937/1
https://leetcode.com/problems/split-array-largest-sum/description/
https://www.codingninjas.com/codestudio/problems/ayush-and-ninja-test_1097574?source=youtube&campaign=love_babbar_codestudio2&utm_source=youtube&utm_medium=affiliate&utm_campaign=love_babbar_codestudio2&leftPanelTab=1



//{ Driver Code Starts
// Initial template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template in C++

class Solution 
{
    public:
   
    bool isPossible(int arr[] , int n , int m , int mid)
    {
        int stcount = 1;
        int studentpages = 0;
        for(int i = 0 ;i<n;i++)
        {
            if(studentpages+arr[i]<=mid)// if current plus previous are possible are less of equal to mid then addup for current student
            {
                studentpages+=arr[i];
            }
            else{
                stcount++;// if current and previous some of one student is more then mid then increase the student number
                if(stcount>m || arr[i]>mid)// arr[i]>perdaytime for this use testcase n =1  m=1 and 2
                {
                    return false;
                }
                studentpages = arr[i];
            }
        }

        return true;
    }
    int findPages(int A[], int N, int M) 
    {
        
        if(M>N)
        {
            return -1; // when student are more and books are less we cant allocate book to all students
        }
        int numpages = 0;
        for(int i = 0 ;i<N;i++)
        {
            numpages+=A[i];
        }
        
        int ans =-1;
        int s = 0 , e = numpages , mid;
        while(s<=e)
        {
            mid = s+(e-s)/2;
            if(isPossible(A ,N , M , mid))
            {
                ans = mid;
                e = mid-1; // because if it is possible for this number then all biger then this also solution so we need to decrease search space
            }
            else{
                s = mid+1;// if not possible then increase it for geeting big value to be possible solution
                // ans = -1;
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int A[n];
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        int m;
        cin>>m;
        Solution ob;
        cout << ob.findPages(A, n, m) << endl;
    }
    return 0;
}

// } Driver Code Ends
