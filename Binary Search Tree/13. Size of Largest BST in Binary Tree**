https://practice.geeksforgeeks.org/problems/largest-bst/1#
https://www.codingninjas.com/codestudio/problems/largest-bst-subtree_893103?leftPanelTab=0&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbar

class info{
    public:
    int maxi;
    int mini;
    bool isBST;
    int size;
};
info solve(Node*root ,int &maxans){ //class type function
    if(root==NULL){
        return {INT_MIN ,INT_MAX ,true ,0};
    }
    else{
        info left = solve(root->left ,maxans);
        info right = solve(root->right ,maxans);
        
        info curr ;
        
        curr.size = left.size+right.size+1;
        curr.maxi = max(root->data , right.maxi);
        curr.mini = min(root->data , left.mini);
        
        if(left.isBST && right.isBST && (root->data >left.maxi && root->data<right.mini)){ //right and left true and root condtion true then full true 
            curr.isBST =true;
        }
        else{
            curr.isBST = false;
        }
        
        if(curr.isBST){
            maxans = max(maxans ,curr.size);
        }
        return curr;
    }
}
class Solution{
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
    	int maxans =0;
    info temp = solve(root, maxans);
    return maxans;//Your code here
    }
};
